{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "issue migrated to github",
    "ClosedDate": "2014-08-05T01:54:21.72-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "This is my contrib to the Library:\n\na CSV data reader implementation to extend ExcelReaderFactory.",
    "LastUpdatedDate": "2014-08-05T01:54:21.72-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "ExcelDataReader",
    "ReportedDate": "2014-06-23T03:19:56.563-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "ExcelCsvReader - CSV reader implementation",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 13097
  },
  "FileAttachments": [
    {
      "FileId": 5006,
      "FileName": "ExcelCsvReader.cs",
      "DownloadUrl": ".\\5006"
    }
  ],
  "Comments": [
    {
      "Message": "Thanks for this. I had thought about incorporating a CSV reader, but it wasn't high on my list because I had already integrated another Csv library. But it would be nice just to have one library.\r\n\r\nI don't suppose you created unit tests for it did you?\r\n\r\nI'll try and integrate this when I get some time (super busy all year so far).",
      "PostedDate": "2014-06-23T09:14:40.71-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Hello and thanks for your feedback.\r\n\r\nNo unit-tests for the class :)\r\n\r\nTo integrate your framework I think it would be enough to extend ExcelReaderFactory:\r\n\r\n```\n        /// <summary>\n        /// Creates an instance of <see cref=\"ExcelCsvReader\"/>\n        /// </summary>\n        /// <param name=\"fileStream\">The file stream.</param>\n        /// <returns></returns>\n        public static IExcelDataReader CreateOpenXmlReader(Stream fileStream)\n        {\n            IExcelDataReader reader = new ExcelCsvReader();\n            reader.Initialize(fileStream);\r\n\r\n            return reader;\n        }\n```\r\n\r\nJust a new property Encoding to my class to handle non-UTF8 (the default encoding) files:\r\n\r\n```\nprivate readonly Encoding m_Default_Encoding = Encoding.UTF8;\nprivate Encoding m_encoding;\r\n\r\n/// <summary>\n/// Gets or sets the encapsuled <see cref=\"StreamReader\"/> <see cref=\"Encoding\"/>.\n/// </summary>\n/// <value>The used Encoding.</value>\npublic Encoding Encoding\n{\n    get { return m_encoding; }\n    set { m_encoding = value; }\n}\n```\r\n\r\nWhile XLS/XLSX \"have/bring\" information about encoding, CSV has not such info so you have to specify it to read characters like à, è, ì...\r\n\r\nUsage, for example:\r\n\r\n```\n((Excel.ExcelCsvReader)excelReader).Encoding = Encoding.GetEncoding(1252);\n```\r\n\r\nHave a  nice day\n",
      "PostedDate": "2014-06-25T02:05:50.997-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Bugfix in TokenizeLine, last \"empty\" token:\r\n\r\n```\n            // ...\n            if (line.Trim().EndsWith(\";\"))\n                tokens.Add(token);\n            else if (!String.IsNullOrEmpty(token))\n                tokens.Add(token);\r\n\r\n            return tokens.ToArray();\n```",
      "PostedDate": "2014-06-27T01:17:54.97-07:00",
      "Id": -2147483648
    },
    {
      "Message": "As we have now migrated to github I have recreated your issue there. \nhttps://github.com/ExcelDataReader/ExcelDataReader/issues/1\r\n\r\nOf course, now it is possible to fork the project and submit pull requests, which should make things easier.\r\n\r\nCheers\n",
      "PostedDate": "2014-08-04T07:50:58.357-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2014-08-05T01:54:21.72-07:00",
      "Id": -2147483648
    }
  ]
}