using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Text;
using Excel.Core;

namespace Excel
{
	/// <summary>
	/// ExcelDataReader Class
	/// </summary>
	public class ExcelDataReader
	{
		private readonly Stream m_file;
		private readonly XlsHeader m_hdr;
		private readonly List<XlsWorksheet> m_sheets = new List<XlsWorksheet>();
		private readonly XlsBiffStream m_stream;
		private readonly DataSet m_workbookData;
		private Encoding m_Default_Encoding = Encoding.UTF8;
		private Encoding m_encoding = Encoding.UTF8;
		private XlsWorkbookGlobals m_globals;
		private ushort m_version = 0x0600;
		private bool m_PromoteToColumns = false;

		private const string WORKBOOK = "Workbook";
		private const string BOOK = "Book";
		private const string COLUMN_DEFAULT_NAME = "Column";

		/// <summary>
		/// DataSet with workbook data, Tables represent Sheets
		/// </summary>
		public DataSet WorkbookData
		{
			get { return m_workbookData; }
		}

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="file">Stream with source data</param>
		public ExcelDataReader(Stream fileStream)
			: this(fileStream, false)
		{
		}

		/// <summary>
		/// constructor
		/// </summary>
		/// <param name="fileStream">Stream with source data</param>
		/// <param name="promoteToColumns">Promote First Row to column names</param>
		public ExcelDataReader(Stream fileStream, bool promoteToColumns)
		{
			m_PromoteToColumns = promoteToColumns;

			using (m_file = fileStream)
			{
				m_hdr = XlsHeader.ReadHeader(m_file);
				XlsRootDirectory dir = new XlsRootDirectory(m_hdr);
				XlsDirectoryEntry workbookEntry = dir.FindEntry(WORKBOOK) ?? dir.FindEntry(BOOK);

				if (workbookEntry == null)
					throw new FileNotFoundException(Errors.ErrorStreamWorkbookNotFound);
				if (workbookEntry.EntryType != STGTY.STGTY_STREAM)
					throw new FormatException(Errors.ErrorWorkbookIsNotStream);

				m_stream = new XlsBiffStream(m_hdr, workbookEntry.StreamFirstSector);

				ReadWorkbookGlobals();

				m_workbookData = new DataSet();

				for (int i = 0; i < m_sheets.Count; i++)
				{
					if (ReadWorksheet(m_sheets[i]))
						m_workbookData.Tables.Add(m_sheets[i].Data);
				}

				m_globals.SST = null;
				m_globals = null;
				m_sheets = null;
				m_stream = null;
				m_hdr = null;

				GC.Collect();
				GC.SuppressFinalize(this);
			}
		}



		/// <summary>
		/// Private method, reads Workbook Globals section
		/// </summary>
		private void ReadWorkbookGlobals()
		{
			m_globals = new XlsWorkbookGlobals();

			m_stream.Seek(0, SeekOrigin.Begin);

			XlsBiffRecord rec = m_stream.Read();
			XlsBiffBOF bof = rec as XlsBiffBOF;

			if (bof == null || bof.Type != BIFFTYPE.WorkbookGlobals)
				throw new InvalidDataException(Errors.ErrorWorkbookGlobalsInvalidData);

			m_version = bof.Version;
			m_encoding = m_Default_Encoding;
			bool isV8 = (m_version >= 0x600);
			bool sst = false;

			while (null != (rec = m_stream.Read()))
			{
				switch (rec.ID)
				{
					case BIFFRECORDTYPE.INTERFACEHDR:
						m_globals.InterfaceHdr = (XlsBiffInterfaceHdr)rec;
						break;
					case BIFFRECORDTYPE.BOUNDSHEET:
						XlsBiffBoundSheet sheet = (XlsBiffBoundSheet)rec;

						if (sheet.Type != XlsBiffBoundSheet.SheetType.Worksheet) break;

						sheet.IsV8 = isV8;
						sheet.UseEncoding = m_encoding ;

						m_sheets.Add(new XlsWorksheet(m_globals.Sheets.Count, sheet));
						m_globals.Sheets.Add(sheet);

						break;
					case BIFFRECORDTYPE.MMS:
						m_globals.MMS = rec;
						break;
					case BIFFRECORDTYPE.COUNTRY:
						m_globals.Country = rec;
						break;
					case BIFFRECORDTYPE.CODEPAGE:
						m_globals.CodePage = (XlsBiffSimpleValueRecord)rec;
						//m_encoding = Encoding.GetEncoding(m_globals.CodePage.Value);						
						break;
					case BIFFRECORDTYPE.FONT:
					case BIFFRECORDTYPE.FONT_V34:
						m_globals.Fonts.Add(rec);
						break;
					case BIFFRECORDTYPE.FORMAT:
					case BIFFRECORDTYPE.FORMAT_V23:
						m_globals.Formats.Add(rec);
						break;
					case BIFFRECORDTYPE.XF:
					case BIFFRECORDTYPE.XF_V4:
					case BIFFRECORDTYPE.XF_V3:
					case BIFFRECORDTYPE.XF_V2:
						m_globals.ExtendedFormats.Add(rec);
						break;
					case BIFFRECORDTYPE.SST:
						m_globals.SST = (XlsBiffSST)rec;
						sst = true;
						break;
					case BIFFRECORDTYPE.CONTINUE:
						if (!sst) break;
						XlsBiffContinue contSST = (XlsBiffContinue)rec;
						m_globals.SST.Append(contSST);
						break;
					case BIFFRECORDTYPE.EXTSST:
						m_globals.ExtSST = rec;
						sst = false;
						break;
					case BIFFRECORDTYPE.EOF:
						if (m_globals.SST != null)
							m_globals.SST.ReadStrings();
						return;
					default:
						continue;
				}
			}
		}

		/// <summary>
		/// private method, reads sheet data
		/// </summary>
		/// <param name="sheet">Sheet object, whose data to read</param>
		/// <returns>True if sheet was read successfully, otherwise False</returns>
		private bool ReadWorksheet(XlsWorksheet sheet)
		{
			m_stream.Seek((int)sheet.DataOffset, SeekOrigin.Begin);

			XlsBiffBOF bof = m_stream.Read() as XlsBiffBOF;
			if (bof == null || bof.Type != BIFFTYPE.Worksheet)
				return false;

			XlsBiffIndex idx = m_stream.Read() as XlsBiffIndex;

			bool isV8 = (m_version >= 0x600);

			if (idx != null)
			{
				idx.IsV8 = isV8;
				DataTable dt = new DataTable(sheet.Name);

				XlsBiffRecord trec;
				XlsBiffDimensions dims = null;

				do
				{
					trec = m_stream.Read();
					if (trec.ID == BIFFRECORDTYPE.DIMENSIONS)
					{
						dims = (XlsBiffDimensions)trec;
						break;
					}

				} while (trec != null && trec.ID != BIFFRECORDTYPE.ROW);

				int maxCol = 256;

				if (dims != null)
				{
					dims.IsV8 = isV8;
					maxCol = dims.LastColumn - 1;
					sheet.Dimensions = dims;
				}


				InitializeColumns(ref dt, maxCol);

				sheet.Data = dt;

				uint maxRow = idx.LastExistingRow;
				if (idx.LastExistingRow <= idx.FirstExistingRow)
				{
					return true;
				}

				dt.BeginLoadData();

				for (int i = 0; i < maxRow; i++)
				{
					dt.Rows.Add(dt.NewRow());
				}

				uint[] dbCellAddrs = idx.DbCellAddresses;

				for (int i = 0; i < dbCellAddrs.Length; i++)
				{
					XlsBiffDbCell dbCell = (XlsBiffDbCell)m_stream.ReadAt((int)dbCellAddrs[i]);
					XlsBiffRow row = null;
					int offs = dbCell.RowAddress;

					do
					{
						row = m_stream.ReadAt(offs) as XlsBiffRow;
						if (row == null) break;

						offs += row.Size;

					} while (null != row);

					while (true)
					{
						XlsBiffRecord rec = m_stream.ReadAt(offs);
						offs += rec.Size;
						if (rec is XlsBiffDbCell) break;
						if (rec is XlsBiffEOF) break;
						XlsBiffBlankCell cell = rec as XlsBiffBlankCell;

						if (cell == null) continue;
						if (cell.ColumnIndex >= maxCol) continue;
						if (cell.RowIndex > maxRow) continue;
						object val;
						switch (cell.ID)
						{
							case BIFFRECORDTYPE.INTEGER:
							case BIFFRECORDTYPE.INTEGER_OLD:
								dt.Rows[cell.RowIndex][cell.ColumnIndex] = ((XlsBiffIntegerCell)cell).Value.ToString();
								break;
							case BIFFRECORDTYPE.NUMBER:
							case BIFFRECORDTYPE.NUMBER_OLD:
								if (IsDateTime(cell.XFormat)) 
								{
									dt.Rows[cell.RowIndex][cell.ColumnIndex] = DateTime.FromOADate(((XlsBiffNumberCell)cell).Value);
								}
								else
								{
									dt.Rows[cell.RowIndex][cell.ColumnIndex] = ((XlsBiffNumberCell)cell).Value;
								}
								break;
							case BIFFRECORDTYPE.LABEL:
							case BIFFRECORDTYPE.LABEL_OLD:
							case BIFFRECORDTYPE.RSTRING:
								dt.Rows[cell.RowIndex][cell.ColumnIndex] = ((XlsBiffLabelCell)cell).Value;
								break;
							case BIFFRECORDTYPE.LABELSST:
								string tmp = m_globals.SST.GetString(((XlsBiffLabelSSTCell)cell).SSTIndex);
								dt.Rows[cell.RowIndex][cell.ColumnIndex] = tmp;
								break;
							case BIFFRECORDTYPE.RK:
								double ValD;
								ValD = ((XlsBiffRKCell)cell).Value;
								if (IsDateTime(cell.XFormat))
								{
									DateTime valDT;
									valDT = System.DateTime.FromOADate(ValD);
									dt.Rows[cell.RowIndex][cell.ColumnIndex] = valDT;
								}else
									dt.Rows[cell.RowIndex][cell.ColumnIndex] = ValD; ;
								break;
							case BIFFRECORDTYPE.MULRK:
								for (ushort j = cell.ColumnIndex; j <= ((XlsBiffMulRKCell)cell).LastColumnIndex; j++)
								{
									//dt.Rows[cell.RowIndex][j] = FormatNumber(((XlsBiffMulRKCell)cell).GetValue(j));
									dt.Rows[cell.RowIndex][j] = (((XlsBiffMulRKCell)cell).GetValue(j));
								}
								break;
							case BIFFRECORDTYPE.BLANK:
							case BIFFRECORDTYPE.BLANK_OLD:
							case BIFFRECORDTYPE.MULBLANK:
								// Skip blank cells

								break;
							case BIFFRECORDTYPE.FORMULA:
							case BIFFRECORDTYPE.FORMULA_OLD:
								((XlsBiffFormulaCell)cell).UseEncoding = m_encoding;
								val = ((XlsBiffFormulaCell)cell).Value;
								if (val == null)
									val = string.Empty;
								else if (val is FORMULAERROR)
									val = "#" + ((FORMULAERROR)val);
								else if (IsDateTime(cell.XFormat))
								{
									DateTime valDT;
									valDT = System.DateTime.FromOADate((double) val);
									val = valDT;
								}
								//else if (val is double)
									//val = FormatNumber((double)val);
								dt.Rows[cell.RowIndex][cell.ColumnIndex] = val;//.ToString();
								//dt.Rows[cell.RowIndex][cell.ColumnIndex] = cell.XFormat;
								break;
							default:
								break;
						}
					}
				}

				dt.EndLoadData();

				if (m_PromoteToColumns)
				{
					RemapColumnsNames(ref dt, dt.Rows[0].ItemArray);
					dt.Rows.RemoveAt(0);
					dt.AcceptChanges();
				}

			}
			else
			{
				return false;
			}

			return true;
		}

		private bool IsDateTime(ushort XFormat)
		{
			switch (XFormat)
			{
				case 62:
				case 63:
				case 66:
				case 67:
				case 68:
				case 69:
				case 70:
					return true;
					
				default:
					return false;
			}
		}

		private string FormatNumber(double x)
		{
			if (Math.Floor(x) == x)
				return Math.Floor(x).ToString();

			return Math.Round(x, 2).ToString(CultureInfo.InvariantCulture);
		}

		private void InitializeColumns(ref DataTable dataTable, int columnsCount)
		{
			for (int i = 0; i < columnsCount; i++)
			{
				dataTable.Columns.Add(COLUMN_DEFAULT_NAME + (i + 1), typeof(string));
			}
		}

		private void RemapColumnsNames(ref DataTable dataTable, object[] columnNames)
		{
			for (int index = 0; index < columnNames.Length; index++)
			{
				if (!string.IsNullOrEmpty(columnNames[index].ToString().Trim()))
				{
					dataTable.Columns[index].ColumnName = columnNames[index].ToString().Trim();
				}
			}
		}
	}
}