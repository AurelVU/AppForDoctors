{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Discussion [https://exceldatareader.codeplex.com/discussions/474291](https://exceldatareader.codeplex.com/discussions/474291)\n\nI am trying to read in a large amount of data using your wonderful tool, which is ideal. \nThe problem is that the xlsx file in question has presumably been generated by a tool, as unless you manually open and then save and close the file, the ExcelDataReader will only read in the first column. \n\nThere are in fact 13 columns, but the first 2 rows are merged. \n\nHaving looked at the source code and stepped through, I can see that while reading the rows in, the array to hold the values is 1 in size, so all the following values are not saved, even though they are read in. \n\nAny help would be much appreciated. :)",
    "LastUpdatedDate": "2014-10-17T13:24:39.91-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "ExcelDataReader",
    "ReportedDate": "2013-12-20T06:39:27.577-08:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Inaccurate column count causes data to be missed.",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 2,
    "Id": 12605
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "The problem appears to lie in that the dimensions of the spreadsheet are not recorded properly in the dimension tag. It simply reads 'A1' instead of 'A1:M11791'\r\n\r\nTo fix this, I added an else block to the statement that checks if the column value will fit it the array:\n```\n...\r\n\r\nint rowIndex = int.Parse(_xmlReader.GetAttribute(XlsxWorksheet.A_r));\n\t\t\t\tif (rowIndex != (_depth + 1))\n\t\t\t\t{\n\t\t\t\t\t_emptyRowCount = rowIndex - _depth - 1;\n\t\t\t\t}\r\n\r\n\n                //If the row number is larger than specified, change dimensions\n                if (sheet.Dimension.LastRow < rowIndex)\n                    sheet.Dimension.LastRow = rowIndex;\r\n\r\n...\n```\r\n\r\nI also added an if statement after the row index is read to modify the row dimension.\n```\n...\r\n\r\nint rowIndex = int.Parse(_xmlReader.GetAttribute(XlsxWorksheet.A_r));\n\t\t\t\tif (rowIndex != (_depth + 1))\n\t\t\t\t{\n\t\t\t\t\t_emptyRowCount = rowIndex - _depth - 1;\n\t\t\t\t}\r\n\r\n                // * This is the new code *\n                //If the row number is larger than specified, change dimensions\n                if (sheet.Dimension.LastRow < rowIndex)\n                    sheet.Dimension.LastRow = rowIndex;\r\n\r\n...\r\n\r\n```",
      "PostedDate": "2013-12-20T07:52:32.263-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I apologize. I mis-pasted the first code sample, and automatically pressed Ctrl-S before I had proof-read.\r\n\r\nHere is the modified code to modify the column dimension\n```\n...\r\n\r\nif (col <= _cellsValues.Length)\n                            _cellsValues[col - 1] = o;\n                        else\n                        {\n                            //If the column number is larger than the dimension given at the top of the sheet, then we need to expand dynamically\n                            sheet.Dimension.LastCol = col;\r\n\r\n                            Array.Resize(ref _cellsValues, sheet.ColumnsCount);\r\n\r\n                            _cellsValues[col - 1] = o;\n                        }\r\n\r\n...\n```",
      "PostedDate": "2013-12-20T07:55:57.533-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I have just committed a fix for something very similar to this which was occuring on files with missing dimensions. It would be great to know if this also fixes your issue.",
      "PostedDate": "2014-01-02T06:06:02.373-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Sorry to reply so late, only recently came back to work.\nI'm afraid it did not fix the issue. Perhaps my file is simply poorly generated.\nThank you very much for your help though :)",
      "PostedDate": "2014-02-07T09:24:36.07-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2014-08-14T05:58:29.733-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I have the same problem when reading excel files exported from Cognos. As previous commenter said, just saving the file again solves the problem.\r\n\r\nI think I narrowed it down to this code\nin\nExcelOpenXmlReader.ReadSheetGlobals\naround line 128\n...\n\tif (_xmlReader.NodeType == XmlNodeType.Element && _xmlReader.LocalName == XlsxWorksheet.N_dimension)\n\t\t\t\t{\n\t\t\t\t\tdimValue = _xmlReader.GetAttribute(XlsxWorksheet.A_ref); \n\t\t\t\t\tsheet.Dimension = new XlsxDimension(dimValue);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n...\ndimValue always gets the value A1 for this file even if there are more than one column with data.\r\n\r\nI tried to remove\nsheet.Dimension = new XlsxDimension(dimValue);\nbreak;\nand let the code further down make the assignment to sheet.Dimension.\nIt seems to work for my files but there might be other side effects I don't see at the moment.",
      "PostedDate": "2014-10-17T13:24:39.91-07:00",
      "Id": -2147483648
    }
  ]
}