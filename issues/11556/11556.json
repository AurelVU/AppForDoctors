{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2013-02-06T03:08:24.223-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Hi,\n\nthere seem to be a couple of issues with the Culture de-DE for example.\n\nThe problem seems to be in the file \"2.1.beta.src\\Excel\\ExcelOpenXmlReader.cs\". On line 202 where you try to parse a double you just use \n```\ndouble.TryParse(o.ToString())\n```\nwhere o has been obtained from an XmlReader.Value property whose return type is string. This will contain the value of the cell as a string, which will contain a point as a decimal separator.\nBy using just TryParse the current culture (in my case German) is used. German exspects a comma as the decimal separator. This wil screw up the value. \n\nYou should use the \n```\nSystem.Double.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out double)\n```\noverload with CultureInfo.InvariantCulture as the IFormatProvider.\n\nAfter that change some unit tests fail. But this is due to a simmilar problem. In the unit tests the values returned from the dataset are converted to string by just using ToString(). If you use instead\n```\nstring.Format(CultureInfo.InvariantCulture, \"{0}\", value)\n```\nthe test will succeed.\n\nKind Regards\nRalf",
    "LastUpdatedDate": "2017-11-27T20:47:29.83-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "ExcelDataReader",
    "ReportedDate": "2013-02-05T05:09:38.23-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Issue with Culture de-DE (and maybe others as well)",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 11556
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "There was a recent fix related to this. Can you try the latest source from the repo?",
      "PostedDate": "2013-02-05T05:35:54.743-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Well, I got the latest source (# 82550) and ran the tests.\nHere is the outcome: (Output generated by TestDriven.Net)\n```\n------ Test started: Assembly: Excel.Tests.dll ------\r\n\r\nTest 'Excel.Tests.ExcelBinaryReaderTest.DoublePrecisionTest' failed: \n  Expected: 3.14159265358979d +/- 1E-14.0d\n  But was:  314159265358979.0d\n\tExcelBinaryReaderTest.cs(239,0): at Excel.Tests.ExcelBinaryReaderTest.DoublePrecisionTest()\r\n\r\nTest 'Excel.Tests.ExcelBinaryReaderTest.File_with_corrupt_or_missing_internal_FAT_structure_can_be_opened_without_exception_issue_11553' failed:\n\tSystem.ArgumentOutOfRangeException : MemoryStream length must be non-negative and less than 2^31 - 1 - origin.\nParameter name: offset\n\tat System.IO.MemoryStream.Seek(Int64 offset, SeekOrigin loc)\n\tCore\\BinaryFormat\\XlsFat.cs(52,0): at Excel.Core.BinaryFormat.XlsFat..ctor(XlsHeader hdr, List`1 sectors, Int32 sizeOfSector, Boolean isMini, XlsRootDirectory rootDir)\n\tCore\\BinaryFormat\\XlsHeader.cs(195,0): at Excel.Core.BinaryFormat.XlsHeader.GetMiniFAT(XlsRootDirectory rootDir)\n\tCore\\BinaryFormat\\XlsStream.cs(32,0): at Excel.Core.BinaryFormat.XlsStream.CalculateMiniFat(XlsRootDirectory rootDir)\n\tCore\\BinaryFormat\\XlsStream.cs(26,0): at Excel.Core.BinaryFormat.XlsStream..ctor(XlsHeader hdr, UInt32 startSector, Boolean isMini, XlsRootDirectory rootDir)\n\tCore\\BinaryFormat\\XlsRootDirectory.cs(21,0): at Excel.Core.BinaryFormat.XlsRootDirectory..ctor(XlsHeader hdr)\n\tExcelBinaryReader.cs(154,0): at Excel.ExcelBinaryReader.readWorkBookGlobals()\n\tExcelBinaryReader.cs(872,0): at Excel.ExcelBinaryReader.Initialize(Stream fileStream)\n\tExcelReaderFactory.cs(22,0): at Excel.ExcelReaderFactory.CreateBinaryReader(Stream fileStream)\n\tExcelBinaryReaderTest.cs(51,0): at Excel.Tests.ExcelBinaryReaderTest.File_with_corrupt_or_missing_internal_FAT_structure_can_be_opened_without_exception_issue_11553()\r\n\r\nTest 'Excel.Tests.ExcelBinaryReaderTest.Issue_Decimal_1109_Test' failed: \n  Expected: 314159.0d\n  But was:  3.1415899999999999d\n\tExcelBinaryReaderTest.cs(459,0): at Excel.Tests.ExcelBinaryReaderTest.Issue_Decimal_1109_Test()\r\n\r\n0:44,99\n1:2009 Samsara \"La Vina\" Pinot Noir\n2:2012 to 2018\n3:91\n4:\n5:\r\n\r\n0:44.99\n1:2009 Samsara \"La Vina\" Pinot Noir\n2:2012 to 2018\n3:91\n4:\n5:\r\n\r\n56 passed, 3 failed, 0 skipped, took 2,85 seconds (NUnit 2.5.10).\r\n\r\n\n```\nThere is still something lurking in the ExcelBinaryReader, I guess.\r\n\r\nSo some problem still remains. And just switching the current culture to \"en-US\" in the TestInitialize of the class \"ExcelOpenXmlReaderTest\" is less than helpfull! It just hides the problems in your code.\nI commented out the switching of the current culture and got a similar result.\n```\n------ Test started: Assembly: Excel.Tests.dll ------\r\n\r\nTest 'Excel.Tests.ExcelBinaryReaderTest.DoublePrecisionTest' failed: \n  Expected: 3.14159265358979d +/- 1E-14.0d\n  But was:  314159265358979.0d\n\tExcelBinaryReaderTest.cs(239,0): at Excel.Tests.ExcelBinaryReaderTest.DoublePrecisionTest()\r\n\r\nTest 'Excel.Tests.ExcelBinaryReaderTest.File_with_corrupt_or_missing_internal_FAT_structure_can_be_opened_without_exception_issue_11553' failed:\n\tSystem.ArgumentOutOfRangeException : MemoryStream length must be non-negative and less than 2^31 - 1 - origin.\nParameter name: offset\n\tat System.IO.MemoryStream.Seek(Int64 offset, SeekOrigin loc)\n\tCore\\BinaryFormat\\XlsFat.cs(52,0): at Excel.Core.BinaryFormat.XlsFat..ctor(XlsHeader hdr, List`1 sectors, Int32 sizeOfSector, Boolean isMini, XlsRootDirectory rootDir)\n\tCore\\BinaryFormat\\XlsHeader.cs(195,0): at Excel.Core.BinaryFormat.XlsHeader.GetMiniFAT(XlsRootDirectory rootDir)\n\tCore\\BinaryFormat\\XlsStream.cs(32,0): at Excel.Core.BinaryFormat.XlsStream.CalculateMiniFat(XlsRootDirectory rootDir)\n\tCore\\BinaryFormat\\XlsStream.cs(26,0): at Excel.Core.BinaryFormat.XlsStream..ctor(XlsHeader hdr, UInt32 startSector, Boolean isMini, XlsRootDirectory rootDir)\n\tCore\\BinaryFormat\\XlsRootDirectory.cs(21,0): at Excel.Core.BinaryFormat.XlsRootDirectory..ctor(XlsHeader hdr)\n\tExcelBinaryReader.cs(154,0): at Excel.ExcelBinaryReader.readWorkBookGlobals()\n\tExcelBinaryReader.cs(872,0): at Excel.ExcelBinaryReader.Initialize(Stream fileStream)\n\tExcelReaderFactory.cs(22,0): at Excel.ExcelReaderFactory.CreateBinaryReader(Stream fileStream)\n\tExcelBinaryReaderTest.cs(51,0): at Excel.Tests.ExcelBinaryReaderTest.File_with_corrupt_or_missing_internal_FAT_structure_can_be_opened_without_exception_issue_11553()\r\n\r\nTest 'Excel.Tests.ExcelBinaryReaderTest.Issue_Decimal_1109_Test' failed: \n  Expected: 314159.0d\n  But was:  3.1415899999999999d\n\tExcelBinaryReaderTest.cs(459,0): at Excel.Tests.ExcelBinaryReaderTest.Issue_Decimal_1109_Test()\r\n\r\n0:44,99\n1:2009 Samsara \"La Vina\" Pinot Noir\n2:2012 to 2018\n3:91\n4:\n5:\r\n\r\nTest 'Excel.Tests.ExcelOpenXmlReaderTest.DoublePrecisionTest' failed: \n  Expected: 3.14159265358979d +/- 1E-14.0d\n  But was:  314159265358979.0d\n\tExcelOpenXmlReaderTest.cs(241,0): at Excel.Tests.ExcelOpenXmlReaderTest.DoublePrecisionTest()\r\n\r\n0:44,99\n1:2009 Samsara \"La Vina\" Pinot Noir\n2:2012 to 2018\n3:91\n4:\n5:\r\n\r\n55 passed, 4 failed, 0 skipped, took 2,28 seconds (NUnit 2.5.10).\n```\nThe extra failed test (Excel.Tests.ExcelOpenXmlReaderTest.DoublePrecisionTest) has its origin in still using the ToString() method.\nI looked at the part of the code that tries to get a double value from Excel in ExcelOpenXmlReader (now at ll 203..205) and notice that you use the culture en-GB. This seems to work. But the idiomatic way (imho) would be to use the InvariantCulture instead of a specific one.\r\n\r\nI hope this didn't sound to negative. \nYour work is highly appreciated by me! \r\n\r\nKind Regards\nRalf",
      "PostedDate": "2013-02-05T14:00:00.377-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I'll take a look at it",
      "PostedDate": "2013-02-06T02:04:49.857-08:00",
      "Id": -2147483648
    },
    {
      "Message": "What is strange is that the test all pass when I run them. I'm going to try switching culture to de-DE and re-run",
      "PostedDate": "2013-02-06T02:08:04.71-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Resolved with changeset 82566: got rid of string conversions in unit tests. changed to invariant culture in reader",
      "PostedDate": "2013-02-06T03:08:24.223-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T17:47:28.6-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T04:59:56.593-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2017-11-27T20:47:29.83-08:00",
      "Id": -2147483648
    }
  ]
}