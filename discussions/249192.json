[
  {
    "Id": "578484",
    "ThreadId": "249192",
    "Html": "\r\n<p>I have modified this library to preserve the datatypes in the AsDataSet in the ExcelBinaryReader and the ExcelOpenXmlReader using System.Object datatype on the columns as opposed to strings. &nbsp;</p>\r\n<p>Also the ExcelOpenXmlReader is not handling string encoding properly resulting in strings such as _x000D_ instead of carriage returns.</p>\r\n<p>It might be a nice enhancement to incorporate this into the base library. &nbsp;If interested, I'd be happy to share.</p>\r\n",
    "PostedDate": "2011-03-10T08:17:16.673-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "581211",
    "ThreadId": "249192",
    "Html": "<p>Please, share your work</p>",
    "PostedDate": "2011-03-16T00:51:39.667-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "582279",
    "ThreadId": "249192",
    "Html": "<p>I'd be happy to, but as this forum doesn't allow attachments, I'm not sure how. &nbsp;</p>\r\n<p>There are a fair number of changes to support this (and a number of fixes to&nbsp;convertOADateTime in both readers)</p>",
    "PostedDate": "2011-03-17T12:13:15.467-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "582323",
    "ThreadId": "249192",
    "Html": "<p>OK, here is a unix diff between my mods and changeset 59893. &nbsp;</p>\n<p>Note that several bugs fixed including reading boolean columns in binary, &nbsp;Bad datetime conversions for 1/1/1900, Missing datetime conversions, and Numeric types getting converted to datetimes, string encoding.</p>\n<div style=\"color: black; background-color: white;\">\n<pre><div style=\"color: black; background-color: white;\"><pre>diff -N -r C:\\dev\\crow.net\\CROW\\Excel/Core/BinaryFormat/XlsBiffFormatString.cs Excel/Core/BinaryFormat/XlsBiffFormatString.cs\n1,102d0\n&lt; <span style=\"color: blue;\">using</span> System.Text;\n&lt; \n&lt; <span style=\"color: blue;\">namespace</span> Excel.Core.BinaryFormat\n&lt; {\n&lt; \t<span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n&lt; \t<span style=\"color: gray;\">///</span><span style=\"color: green;\"> Represents a string value of formula</span>\n&lt; \t<span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n&lt; \t<span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">class</span> XlsBiffFormatString : XlsBiffRecord\n&lt; \t{\n&lt; \n&lt;         <span style=\"color: blue;\">private</span> Encoding m_UseEncoding =  Encoding.Default;\n&lt; \t\t<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">string</span> m_value = <span style=\"color: blue;\">null</span>;\n&lt; \t\t\n&lt; \n&lt; \t\t<span style=\"color: blue;\">internal</span> XlsBiffFormatString(<span style=\"color: blue;\">byte</span>[] bytes)\n&lt; \t\t\t: <span style=\"color: blue;\">this</span>(bytes, 0)\n&lt; \t\t{\n&lt; \t\t}\n&lt; \n&lt;         <span style=\"color: blue;\">internal</span> XlsBiffFormatString(<span style=\"color: blue;\">byte</span>[] bytes, <span style=\"color: blue;\">uint</span> offset)\n&lt; \t\t\t: <span style=\"color: blue;\">base</span>(bytes, offset)\n&lt; \t\t{\n&lt; \t\t}\n&lt; \n&lt; \n&lt;         <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n&lt;         <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Encoding used to deal with strings</span>\n&lt;         <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n&lt;         <span style=\"color: blue;\">public</span> Encoding UseEncoding\n&lt;         {\n&lt;             <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> m_UseEncoding; }\n&lt;             <span style=\"color: blue;\">set</span> { m_UseEncoding = value; }\n&lt;         }\n&lt; \n&lt; \t\t<span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n&lt; \t\t<span style=\"color: gray;\">///</span><span style=\"color: green;\"> Length of the string</span>\n&lt; \t\t<span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n&lt; \t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">ushort</span> Length\n&lt; \t\t{\n&lt; \t\t\t<span style=\"color: blue;\">get</span>\n&lt; \t\t\t{\n&lt; \t\t\t     <span style=\"color: blue;\">switch</span> (ID)\n&lt; \t\t\t     {\n&lt; \t\t\t         <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.FORMAT_V23:\n&lt; \t\t\t             <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">base</span>.ReadByte(0x0);\n&lt; \t\t\t         <span style=\"color: blue;\">default</span>:\n&lt; \t\t\t             <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">base</span>.ReadUInt16(2);\n&lt; \t\t\t     }\n&lt; \t\t\t}\n&lt; \t\t}\n&lt; \n&lt; \t\t<span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\n&lt; \t\t<span style=\"color: gray;\">///</span><span style=\"color: green;\"> String text</span>\n&lt; \t\t<span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\n&lt;         <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">string</span> Value\n&lt;         {\n&lt;             <span style=\"color: blue;\">get</span>\n&lt;             {\n&lt;                 <span style=\"color: blue;\">if</span> (m_value == <span style=\"color: blue;\">null</span>)\n&lt;                 {\n&lt;                     <span style=\"color: blue;\">switch</span> (ID)\n&lt;                     {\n&lt;                         <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.FORMAT_V23:\n&lt;                             m_value = m_UseEncoding.GetString(m_bytes, m_readoffset + 1, Length);\n&lt;                             <span style=\"color: blue;\">break</span>;\n&lt;                         <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.FORMAT:\n&lt;                             <span style=\"color: blue;\">var</span> offset = m_readoffset + 5;\n&lt;                             <span style=\"color: blue;\">var</span> flags = ReadByte(3);\n&lt;                             m_UseEncoding = (flags &amp; 0x01) == 0x01 ? Encoding.Unicode : Encoding.Default;\n&lt;                             <span style=\"color: blue;\">if</span> ((flags &amp; 0x04) == 0x01) <span style=\"color: green;\">// asian phonetic block size</span>\n&lt;                                 offset += 4;\n&lt;                             <span style=\"color: blue;\">if</span> ((flags &amp; 0x08) == 0x01) <span style=\"color: green;\">// number of rtf blocks</span>\n&lt;                                 offset += 2;\n&lt;                             m_value = m_UseEncoding.IsSingleByte ? m_UseEncoding.GetString(m_bytes, offset, Length) : m_UseEncoding.GetString(m_bytes, offset, Length*2);\n&lt; \n&lt;                             <span style=\"color: blue;\">break</span>;\n&lt; \n&lt; \n&lt;                     }\n&lt;                    \n&lt; \n&lt;                 }\n&lt;                 <span style=\"color: blue;\">return</span> m_value;\n&lt;             }\n&lt;         }\n&lt; \n&lt;         <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">ushort</span> Index\n&lt;         {\n&lt;             <span style=\"color: blue;\">get</span>\n&lt;             {\n&lt;                 <span style=\"color: blue;\">switch</span> (ID)\n&lt;                 {\n&lt;                     <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.FORMAT_V23:\n&lt;                         <span style=\"color: blue;\">return</span> 0;\n&lt;                     <span style=\"color: blue;\">default</span>:\n&lt;                         <span style=\"color: blue;\">return</span> ReadUInt16(0);\n&lt; \n&lt;                 }\n&lt;             }\n&lt;         }\n&lt; \t}\n&lt; }\n\\ No newline at end of file\ndiff -N -r C:\\dev\\crow.net\\CROW\\Excel/Core/BinaryFormat/XlsBiffRecord.cs Excel/Core/BinaryFormat/XlsBiffRecord.cs\n100,101d99\n&lt;                 <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.BOOLERR:\n&lt;                 <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.BOOLERR_OLD:\n126,128d123\n&lt;                 <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.FORMAT_V23:\n&lt;                 <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.FORMAT:\n&lt;                     <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">new</span> XlsBiffFormatString(bytes, offset);\ndiff -N -r C:\\dev\\crow.net\\CROW\\Excel/Core/BinaryFormat/XlsWorkbookGlobals.cs Excel/Core/BinaryFormat/XlsWorkbookGlobals.cs\n12c12\n&lt;         <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">readonly</span> Dictionary&lt;<span style=\"color: blue;\">ushort</span>, XlsBiffFormatString&gt; m_Formats = <span style=\"color: blue;\">new</span> Dictionary&lt;<span style=\"color: blue;\">ushort</span>, XlsBiffFormatString&gt;();\n---\n&gt; \t\t<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">readonly</span> List&lt;XlsBiffRecord&gt; m_Formats = <span style=\"color: blue;\">new</span> List&lt;XlsBiffRecord&gt;();\n74c74\n&lt;         <span style=\"color: blue;\">public</span> Dictionary&lt;<span style=\"color: blue;\">ushort</span>, XlsBiffFormatString&gt; Formats\n---\n&gt; \t\t<span style=\"color: blue;\">public</span> List&lt;XlsBiffRecord&gt; Formats\n79,80d78\n&lt;         \n&lt; \ndiff -N -r C:\\dev\\crow.net\\CROW\\Excel/Core/Helpers.cs Excel/Core/Helpers.cs\n3,5d2\n&lt; <span style=\"color: blue;\">using</span> System.Data;\n&lt; <span style=\"color: blue;\">using</span> System.Globalization;\n&lt; <span style=\"color: blue;\">using</span> System.Text.RegularExpressions;\n48,129c45\n&lt; \t    <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> Regex re = <span style=\"color: blue;\">new</span> Regex(<span style=\"color: #a31515;\">\"_x([0-9A-F]{4,4})_\"</span>);\n&lt; \n&lt;         <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">string</span> ConvertEscapeChars(<span style=\"color: blue;\">string</span> input)\n&lt;         {\n&lt;             <span style=\"color: blue;\">return</span> re.Replace(input, m =&gt; (((<span style=\"color: blue;\">char</span>)UInt32.Parse(m.Groups[1].Value, NumberStyles.HexNumber))).ToString());\n&lt;         }\n&lt; \n&lt; \t    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">object</span> ConvertFromOATime(<span style=\"color: blue;\">double</span> value)\n&lt; \t    {\n&lt; \t        <span style=\"color: blue;\">if</span> ((value &gt;= 0.0) &amp;&amp; (value &lt; 60.0))\n&lt; \t        {\n&lt; \t            value++;\n&lt; \t        }\n&lt; \t        <span style=\"color: green;\">//if (date1904)</span>\n&lt; \t        <span style=\"color: green;\">//{</span>\n&lt; \t        <span style=\"color: green;\">//    Value += 1462.0;</span>\n&lt; \t        <span style=\"color: green;\">//}</span>\n&lt; \t        <span style=\"color: blue;\">return</span> DateTime.FromOADate(value);\n&lt; \t    }\n&lt; \n&lt;         <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> FixDataTypes(DataSet dataset)\n&lt;         {\n&lt;             <span style=\"color: blue;\">var</span> tables = <span style=\"color: blue;\">new</span> List&lt;DataTable&gt;(dataset.Tables.Count);\n&lt;             <span style=\"color: blue;\">bool</span> convert = <span style=\"color: blue;\">false</span>;\n&lt;             <span style=\"color: blue;\">foreach</span> (DataTable table <span style=\"color: blue;\">in</span> dataset.Tables)\n&lt;             {\n&lt;                \n&lt;                 <span style=\"color: blue;\">if</span> ( table.Rows.Count == 0)\n&lt;                 {\n&lt;                     tables.Add(table);\n&lt;                     <span style=\"color: blue;\">continue</span>;\n&lt;                 }\n&lt;                 DataTable newTable = <span style=\"color: blue;\">null</span>;\n&lt;                 <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> i = 0; i &lt; table.Columns.Count; i++)\n&lt;                 {\n&lt;                     Type type = <span style=\"color: blue;\">null</span>;\n&lt;                     <span style=\"color: blue;\">foreach</span> (DataRow row  <span style=\"color: blue;\">in</span> table.Rows)\n&lt;                     {\n&lt;                         <span style=\"color: blue;\">if</span> (row.IsNull(i))\n&lt;                             <span style=\"color: blue;\">continue</span>;\n&lt;                         <span style=\"color: blue;\">var</span> curType = row[i].GetType();\n&lt;                         <span style=\"color: blue;\">if</span> (curType != type)\n&lt;                         {\n&lt;                             <span style=\"color: blue;\">if</span> (type == <span style=\"color: blue;\">null</span>)\n&lt;                                 type = curType;\n&lt;                             <span style=\"color: blue;\">else</span>\n&lt;                             {\n&lt;                                 type = <span style=\"color: blue;\">null</span>;\n&lt;                                 <span style=\"color: blue;\">break</span>;\n&lt;                             }\n&lt;                         }\n&lt;                     }\n&lt;                     <span style=\"color: blue;\">if</span> (type != <span style=\"color: blue;\">null</span>)\n&lt;                     {\n&lt;                         convert = <span style=\"color: blue;\">true</span>;\n&lt;                         <span style=\"color: blue;\">if</span> (newTable == <span style=\"color: blue;\">null</span>)\n&lt;                             newTable = table.Clone();\n&lt;                         newTable.Columns[i].DataType = type;\n&lt; \n&lt;                     }\n&lt;                 }\n&lt;                 <span style=\"color: blue;\">if</span> (newTable != <span style=\"color: blue;\">null</span>)\n&lt;                 {\n&lt;                     newTable.BeginLoadData();\n&lt;                     <span style=\"color: blue;\">foreach</span> (DataRow row <span style=\"color: blue;\">in</span> table.Rows)\n&lt;                     {\n&lt;                         newTable.ImportRow(row);\n&lt;                     }\n&lt; \n&lt;                     newTable.EndLoadData();\n&lt;                     tables.Add(newTable);\n&lt; \n&lt;                 }\n&lt;                 <span style=\"color: blue;\">else</span> tables.Add(table);\n&lt;             }\n&lt;             <span style=\"color: blue;\">if</span> (convert)\n&lt;             {\n&lt;                 dataset.Tables.Clear();\n&lt;                 dataset.Tables.AddRange(tables.ToArray());\n&lt;             }\n&lt;         }\n&lt;     }\n---\n&gt; \t}\ndiff -N -r C:\\dev\\crow.net\\CROW\\Excel/ExcelBinaryReader.cs Excel/ExcelBinaryReader.cs\n6d5\n&lt; <span style=\"color: blue;\">using</span> Excel.Core;\n209,221c208,211\n&lt;                     <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.FORMAT_V23:\n&lt; \t\t\t\t        {\n&lt; \t\t\t\t            <span style=\"color: blue;\">var</span> fmt = (XlsBiffFormatString) rec;\n&lt; \t\t\t\t            fmt.UseEncoding = m_encoding;\n&lt; \t\t\t\t            m_globals.Formats.Add((<span style=\"color: blue;\">ushort</span>) m_globals.Formats.Count, fmt);\n&lt; \t\t\t\t        }\n&lt;                         <span style=\"color: blue;\">break</span>;\n&lt;                     <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.FORMAT:\n&lt; \t\t\t\t        {\n&lt; \t\t\t\t            <span style=\"color: blue;\">var</span> fmt = (XlsBiffFormatString) rec;\n&lt;                             m_globals.Formats.Add(fmt.Index, fmt);\n&lt; \t\t\t\t        }\n&lt; \t\t\t\t        <span style=\"color: blue;\">break</span>;\n---\n&gt; \t\t\t\t\t<span style=\"color: blue;\">case</span> BIFFRECORDTYPE.FORMAT:\n&gt; \t\t\t\t\t<span style=\"color: blue;\">case</span> BIFFRECORDTYPE.FORMAT_V23:\n&gt; \t\t\t\t\t\tm_globals.Formats.Add(rec);\n&gt; \t\t\t\t\t\t<span style=\"color: blue;\">break</span>;\n373c363\n&lt; \t\t\t\t\t\t\t\ttable.Columns.Add(m_cellsValues[i].ToString(), <span style=\"color: blue;\">typeof</span>(Object));\n---\n&gt; \t\t\t\t\t\t\t\ttable.Columns.Add(m_cellsValues[i].ToString());\n375c365\n&lt;                                 table.Columns.Add(<span style=\"color: blue;\">string</span>.Concat(COLUMN, i), <span style=\"color: blue;\">typeof</span>(Object));\n---\n&gt; \t\t\t\t\t\t\t\ttable.Columns.Add(<span style=\"color: blue;\">string</span>.Concat(COLUMN, i));\n382c372\n&lt;                             table.Columns.Add(<span style=\"color: blue;\">null</span>, <span style=\"color: blue;\">typeof</span>(Object));\n---\n&gt; \t\t\t\t\t\t\ttable.Columns.Add();\n410,417d399\n&lt;                 <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.BOOLERR:\n&lt;                     <span style=\"color: blue;\">if</span> (cell.ReadByte(7) == 0)\n&lt;                         m_cellsValues[cell.ColumnIndex] = cell.ReadByte(6) != 0;\n&lt;                     <span style=\"color: blue;\">break</span>;\n&lt;                 <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.BOOLERR_OLD:\n&lt;                     <span style=\"color: blue;\">if</span> (cell.ReadByte(8) == 0)\n&lt;                         m_cellsValues[cell.ColumnIndex] = cell.ReadByte(7) != 0;\n&lt;                     <span style=\"color: blue;\">break</span>;\n453,454c435\n&lt;                         _dValue = _rkCell.GetValue(j);\n&lt;                         m_cellsValues[j] = !m_ConvertOADate ? _dValue : tryConvertOADateTime(_dValue, _rkCell.GetXF(j));\n---\n&gt; \t\t\t\t\t\tm_cellsValues[j] = _rkCell.GetValue(j);\n549c530\n&lt; \t\t<span style=\"color: blue;\">private</span>  <span style=\"color: blue;\">object</span> tryConvertOADateTime(<span style=\"color: blue;\">double</span> value, <span style=\"color: blue;\">ushort</span> XFormat)\n---\n&gt; \t\t<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">object</span> tryConvertOADateTime(<span style=\"color: blue;\">double</span> value, <span style=\"color: blue;\">ushort</span> XFormat)\n551,653c532,561\n&lt; \t\t    <span style=\"color: blue;\">ushort</span> format = 0;\n&lt;             <span style=\"color: blue;\">if</span> (XFormat &gt;= 0 &amp;&amp; XFormat &lt; m_globals.ExtendedFormats.Count)\n&lt;             {\n&lt;                 <span style=\"color: blue;\">var</span> rec = m_globals.ExtendedFormats[XFormat];\n&lt;                 <span style=\"color: blue;\">switch</span> (rec.ID)\n&lt;                 {\n&lt;                     <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.XF_V2:\n&lt;                         format = (<span style=\"color: blue;\">ushort</span>) (rec.ReadByte(2) &amp; 0x3F);\n&lt;                         <span style=\"color: blue;\">break</span>;\n&lt;                     <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.XF_V3:\n&lt;                           <span style=\"color: blue;\">if</span> ((rec.ReadByte(3) &amp; 4) == 0)\n&lt;                             <span style=\"color: blue;\">return</span> value.ToString();\n&lt;                         format = rec.ReadByte(1);\n&lt;                         <span style=\"color: blue;\">break</span>;\n&lt;                     <span style=\"color: blue;\">case</span> BIFFRECORDTYPE.XF_V4:\n&lt;                         <span style=\"color: blue;\">if</span> ((rec.ReadByte(5) &amp; 4) == 0)\n&lt;                             <span style=\"color: blue;\">return</span> value.ToString();\n&lt;                         format = rec.ReadByte(1);\n&lt;                         <span style=\"color: blue;\">break</span>;\n&lt;                     \n&lt;                     <span style=\"color: blue;\">default</span>:\n&lt;                         <span style=\"color: blue;\">if</span> ((rec.ReadByte(m_globals.Sheets[m_globals.Sheets.Count-1].IsV8 ? 9 : 7) &amp; 4) == 0)\n&lt;                             <span style=\"color: blue;\">return</span> value.ToString();\n&lt;                         \n&lt;                         format = rec.ReadUInt16(2);\n&lt;                         <span style=\"color: blue;\">break</span>;\n&lt;                 }\n&lt;             }\n&lt; \n&lt;            \n&lt;             <span style=\"color: blue;\">switch</span> (format)\n&lt;             {\n&lt;                 <span style=\"color: green;\">// numeric built in formats</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0: <span style=\"color: green;\">//\"General\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 1: <span style=\"color: green;\">//\"0\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 2: <span style=\"color: green;\">//\"0.00\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 3: <span style=\"color: green;\">//\"#,##0\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 4: <span style=\"color: green;\">//\"#,##0.00\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 5: <span style=\"color: green;\">//\"\\\"$\\\"#,##0_);(\\\"$\\\"#,##0)\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 6: <span style=\"color: green;\">//\"\\\"$\\\"#,##0_);[Red](\\\"$\\\"#,##0)\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 7: <span style=\"color: green;\">//\"\\\"$\\\"#,##0.00_);(\\\"$\\\"#,##0.00)\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 8: <span style=\"color: green;\">//\"\\\"$\\\"#,##0.00_);[Red](\\\"$\\\"#,##0.00)\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 9: <span style=\"color: green;\">//\"0%\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 10: <span style=\"color: green;\">//\"0.00%\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 11: <span style=\"color: green;\">//\"0.00E+00\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 12: <span style=\"color: green;\">//\"# ?/?\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 13: <span style=\"color: green;\">//\"# ??/??\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x30:<span style=\"color: green;\">// \"##0.0E+0\";</span>\n&lt;                \n&lt;                 <span style=\"color: blue;\">case</span> 0x25:<span style=\"color: green;\">// \"_(#,##0_);(#,##0)\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x26:<span style=\"color: green;\">// \"_(#,##0_);[Red](#,##0)\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x27:<span style=\"color: green;\">// \"_(#,##0.00_);(#,##0.00)\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 40:<span style=\"color: green;\">// \"_(#,##0.00_);[Red](#,##0.00)\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x29:<span style=\"color: green;\">// \"_(\\\"$\\\"* #,##0_);_(\\\"$\\\"* (#,##0);_(\\\"$\\\"* \\\"-\\\"_);_(@_)\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x2a:<span style=\"color: green;\">// \"_(\\\"$\\\"* #,##0_);_(\\\"$\\\"* (#,##0);_(\\\"$\\\"* \\\"-\\\"_);_(@_)\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x2b:<span style=\"color: green;\">// \"_(\\\"$\\\"* #,##0.00_);_(\\\"$\\\"* (#,##0.00);_(\\\"$\\\"* \\\"-\\\"??_);_(@_)\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x2c:<span style=\"color: green;\">// \"_(* #,##0.00_);_(* (#,##0.00);_(* \\\"-\\\"??_);_(@_)\";</span>\n&lt;                     <span style=\"color: blue;\">return</span> value;\n&lt; \n&lt;                     <span style=\"color: green;\">// date formats</span>\n&lt;                 <span style=\"color: blue;\">case</span> 14: <span style=\"color: green;\">//this.GetDefaultDateFormat();</span>\n&lt;                 <span style=\"color: blue;\">case</span> 15: <span style=\"color: green;\">//\"D-MM-YY\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x10: <span style=\"color: green;\">// \"D-MMM\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x11: <span style=\"color: green;\">// \"MMM-YY\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x12: <span style=\"color: green;\">// \"h:mm AM/PM\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x13: <span style=\"color: green;\">// \"h:mm:ss AM/PM\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 20: <span style=\"color: green;\">// \"h:mm\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x15: <span style=\"color: green;\">// \"h:mm:ss\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x16: <span style=\"color: green;\">// string.Format(\"{0} {1}\", this.GetDefaultDateFormat(), this.GetDefaultTimeFormat());</span>\n&lt;                    \n&lt;                 <span style=\"color: blue;\">case</span> 0x2d: <span style=\"color: green;\">// \"mm:ss\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x2e: <span style=\"color: green;\">// \"[h]:mm:ss\";</span>\n&lt;                 <span style=\"color: blue;\">case</span> 0x2f: <span style=\"color: green;\">// \"mm:ss.0\";</span>\n&lt;                     <span style=\"color: blue;\">return</span> Helpers.ConvertFromOATime(value);\n&lt;                  <span style=\"color: blue;\">case</span> 0x31:<span style=\"color: green;\">// \"@\";</span>\n&lt;                     <span style=\"color: blue;\">return</span> value.ToString();\n&lt; \n&lt;                 <span style=\"color: blue;\">default</span>:\n&lt;                     XlsBiffFormatString fmtString;\n&lt;                     <span style=\"color: blue;\">if</span> (m_globals.Formats.TryGetValue(format, <span style=\"color: blue;\">out</span> fmtString) )\n&lt;                     {\n&lt;                         <span style=\"color: blue;\">var</span> fmt = fmtString.Value.ToUpper();\n&lt;                         <span style=\"color: blue;\">if</span> ((((fmt.IndexOf(<span style=\"color: #a31515;\">\"D\"</span>) &gt;= 0) || (fmt.IndexOf(<span style=\"color: #a31515;\">\"M\"</span>) &gt;= 0)) || ((fmt.IndexOf(<span style=\"color: #a31515;\">\"YY\"</span>) &gt;= 0) || (fmt.IndexOf(<span style=\"color: #a31515;\">\"H\"</span>) &gt;= 0))) || (fmt.IndexOf(<span style=\"color: #a31515;\">\"SS\"</span>) &gt;= 0))\n&lt;                             <span style=\"color: blue;\">return</span> Helpers.ConvertFromOATime(value); \n&lt; \n&lt;                     }\n&lt;                     <span style=\"color: blue;\">return</span> value;\n&lt; \n&lt; \n&lt; \n&lt;             }\n&lt; \n&lt; \t\t    \n&lt; \t\t}\n&lt; \n&lt; \t    <span style=\"color: blue;\">private</span>  <span style=\"color: blue;\">object</span> tryConvertOADateTime(<span style=\"color: blue;\">object</span> value, <span style=\"color: blue;\">ushort</span> XFormat)\n&lt; \t    {\n&lt; \t        <span style=\"color: blue;\">double</span> _dValue;\n&lt; \n&lt; \n&lt; \t        <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">double</span>.TryParse(value.ToString(), <span style=\"color: blue;\">out</span> _dValue))\n&lt; \t            <span style=\"color: blue;\">return</span> tryConvertOADateTime(_dValue, XFormat);\n&lt; \t        <span style=\"color: blue;\">return</span> _dValue;\n---\n&gt; \t\t\t<span style=\"color: blue;\">switch</span> (XFormat)\n&gt; \t\t\t{\n&gt; \t\t\t\t<span style=\"color: green;\">//Time format</span>\n&gt; \t\t\t\t<span style=\"color: blue;\">case</span> 63:\n&gt; \t\t\t\t<span style=\"color: blue;\">case</span> 68:\n&gt; \t\t\t\t\tDateTime time = DateTime.FromOADate(value);\n&gt; \n&gt; \t\t\t\t\t<span style=\"color: blue;\">return</span> (time.Second == 0)\n&gt; \t\t\t\t\t\t? time.ToShortTimeString()\n&gt; \t\t\t\t\t\t: time.ToLongTimeString();\n&gt; \n&gt; \t\t\t\t<span style=\"color: green;\">//Date Format</span>\n&gt; \t\t\t\t<span style=\"color: blue;\">case</span> 26:\n&gt; \t\t\t\t<span style=\"color: blue;\">case</span> 62:\n&gt; \t\t\t\t<span style=\"color: blue;\">case</span> 64:\n&gt; \t\t\t\t<span style=\"color: blue;\">case</span> 67:\n&gt; \t\t\t\t<span style=\"color: blue;\">case</span> 69:\n&gt; \t\t\t\t<span style=\"color: blue;\">case</span> 70:\n&gt; \t\t\t\t<span style=\"color: blue;\">case</span> 100: <span style=\"color: blue;\">return</span> DateTime.FromOADate(value).ToString(System.Globalization.CultureInfo.CurrentCulture);\n&gt; \t\t\t\t<span style=\"color: green;\">//case 100: return DateTime.FromOADate(value).ToString(System.Globalization.CultureInfo.InvariantCulture);</span>\n&gt; \n&gt; \t\t\t\t<span style=\"color: blue;\">default</span>:\n&gt; \t\t\t\t\t<span style=\"color: blue;\">return</span> value;\n&gt; \t\t\t}\n&gt; \t\t}\n&gt; \n&gt; \t\t<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">object</span> tryConvertOADateTime(<span style=\"color: blue;\">object</span> value, <span style=\"color: blue;\">ushort</span> XFormat)\n&gt; \t\t{\n&gt; \t\t\t<span style=\"color: blue;\">double</span> _dValue;\n&gt; \t\t\t<span style=\"color: blue;\">object</span> r;\n655c563,575\n&lt; \t    }\n---\n&gt; \t\t\t<span style=\"color: blue;\">try</span>\n&gt; \t\t\t{\n&gt; \t\t\t\t_dValue = <span style=\"color: blue;\">double</span>.Parse(value.ToString());\n&gt; \n&gt; \t\t\t\tr = tryConvertOADateTime(_dValue, XFormat);\n&gt; \t\t\t}\n&gt; \t\t\t<span style=\"color: blue;\">catch</span> (FormatException)\n&gt; \t\t\t{\n&gt; \t\t\t\tr = value;\n&gt; \t\t\t}\n&gt; \n&gt; \t\t\t<span style=\"color: blue;\">return</span> r;\n&gt; \t\t}\n657c577\n&lt; \t    <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">bool</span> isV8()\n---\n&gt; \t\t<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">bool</span> isV8()\n686d605\n&lt;             \n698,699d616\n&lt; \t\t    m_workbookData.AcceptChanges();\n&lt; \t\t    Helpers.FixDataTypes(m_workbookData);\ndiff -N -r C:\\dev\\crow.net\\CROW\\Excel/ExcelOpenXmlReader.cs Excel/ExcelOpenXmlReader.cs\n68c68\n&lt; \t\t\t\t<span style=\"color: blue;\">string</span> fc = numFmt.FormatCode.ToLower();\n---\n&gt; \t\t\t\t<span style=\"color: blue;\">string</span> fc = numFmt.FormatCode;\n153,201c153,195\n&lt;                 <span style=\"color: blue;\">while</span> (_xmlReader.Read())\n&lt;                 {\n&lt;                     <span style=\"color: blue;\">if</span> (_xmlReader.Depth == 2) <span style=\"color: blue;\">break</span>;\n&lt; \n&lt;                     <span style=\"color: blue;\">if</span> (_xmlReader.NodeType == XmlNodeType.Element)\n&lt;                     {\n&lt;                         hasValue = <span style=\"color: blue;\">false</span>;\n&lt; \n&lt;                         <span style=\"color: blue;\">if</span> (_xmlReader.Name == XlsxWorksheet.N_c)\n&lt;                         {\n&lt;                             a_s = _xmlReader.GetAttribute(XlsxWorksheet.A_s);\n&lt;                             a_t = _xmlReader.GetAttribute(XlsxWorksheet.A_t);\n&lt;                             a_r = _xmlReader.GetAttribute(XlsxWorksheet.A_r);\n&lt;                             XlsxDimension.XlsxDim(a_r, <span style=\"color: blue;\">out</span> col, <span style=\"color: blue;\">out</span> row);\n&lt;                         }\n&lt;                         <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (_xmlReader.Name == XlsxWorksheet.N_v)\n&lt;                         {\n&lt;                             hasValue = <span style=\"color: blue;\">true</span>;\n&lt;                         }\n&lt;                     }\n&lt; \n&lt;                     <span style=\"color: blue;\">if</span> (_xmlReader.NodeType == XmlNodeType.Text &amp;&amp; hasValue)\n&lt;                     {\n&lt;                         <span style=\"color: blue;\">double</span> number;\n&lt;                         <span style=\"color: blue;\">object</span> o = _xmlReader.Value;\n&lt;                         <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">double</span>.TryParse(o.ToString(), <span style=\"color: blue;\">out</span> number))                        \n&lt;                             o = number;\n&lt; \n&lt; \n&lt;                         <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">null</span> != a_t &amp;&amp; a_t == XlsxWorksheet.A_s)\n&lt;                         {\n&lt;                             o = Helpers.ConvertEscapeChars(_workbook.SST[(<span style=\"color: blue;\">int</span>)o]);\n&lt;                         }\n&lt;                         <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">null</span> != a_s)\n&lt;                         {\n&lt;                             XlsxXf xf = _workbook.Styles.CellXfs[<span style=\"color: blue;\">int</span>.Parse(a_s)];\n&lt;                             <span style=\"color: blue;\">if</span> (xf.ApplyNumberFormat &amp;&amp; o != <span style=\"color: blue;\">null</span> &amp;&amp; o.ToString() != <span style=\"color: blue;\">string</span>.Empty &amp;&amp; IsDateTimeStyle(xf.NumFmtId))\n&lt;                                 o = Helpers.ConvertFromOATime(number);\n&lt;                             <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (xf.NumFmtId == 49)\n&lt;                                 o = o.ToString();\n&lt;                         }\n&lt;                         <span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (a_t == <span style=\"color: #a31515;\">\"b\"</span>) <span style=\"color: green;\">//boolean</span>\n&lt;                             o = _xmlReader.Value == <span style=\"color: #a31515;\">\"1\"</span>;                          \n&lt; \n&lt; \n&lt;                         <span style=\"color: blue;\">if</span> (col - 1 &lt; _cellsValues.Length)\n&lt;                             _cellsValues[col - 1] = o;\n&lt;                     }\n&lt;                 }\n---\n&gt;  \t\t\t\t<span style=\"color: blue;\">while</span> (_xmlReader.Read())\n&gt;  \t\t\t\t{\n&gt;  \t\t\t\t\t<span style=\"color: blue;\">if</span> (_xmlReader.Depth == 2) <span style=\"color: blue;\">break</span>;\n&gt;  \n&gt; \t\t\t\t\t<span style=\"color: blue;\">if</span> (_xmlReader.NodeType == XmlNodeType.Element)\n&gt;  \t\t\t\t\t{\n&gt; \t\t\t\t\t\thasValue = <span style=\"color: blue;\">false</span>;\n&gt;  \n&gt; \t\t\t\t\t\t<span style=\"color: blue;\">if</span> (_xmlReader.Name == XlsxWorksheet.N_c)\n&gt; \t\t\t\t\t\t{\n&gt; \t\t\t\t\t\t\ta_s = _xmlReader.GetAttribute(XlsxWorksheet.A_s);\n&gt; \t\t\t\t\t\t\ta_t = _xmlReader.GetAttribute(XlsxWorksheet.A_t);\n&gt; \t\t\t\t\t\t\ta_r = _xmlReader.GetAttribute(XlsxWorksheet.A_r);\n&gt; \t\t\t\t\t\t\tXlsxDimension.XlsxDim(a_r, <span style=\"color: blue;\">out</span> col, <span style=\"color: blue;\">out</span> row);\n&gt; \t\t\t\t\t\t}\n&gt; \t\t\t\t\t\t<span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (_xmlReader.Name == XlsxWorksheet.N_v)\n&gt; \t\t\t\t\t\t{\n&gt; \t\t\t\t\t\t\thasValue = <span style=\"color: blue;\">true</span>;\n&gt; \t\t\t\t\t\t}\n&gt; \t\t\t\t\t}\n&gt;  \n&gt; \t\t\t\t\t<span style=\"color: blue;\">if</span> (_xmlReader.NodeType == XmlNodeType.Text &amp;&amp; hasValue)\n&gt; \t\t\t\t\t{\n&gt; \t\t\t\t\t\t<span style=\"color: blue;\">object</span> o = _xmlReader.Value;\n&gt;  \n&gt;  \t\t\t\t\t\t<span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">null</span> != a_t &amp;&amp; a_t == XlsxWorksheet.A_s)\n&gt;  \t\t\t\t\t\t{\n&gt; \t\t\t\t\t\t\to = _workbook.SST[Convert.ToInt32(o)];\n&gt; \t\t\t\t\t\t}\n&gt; \t\t\t\t\t\t<span style=\"color: blue;\">else</span> <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">null</span> != a_s)\n&gt; \t\t\t\t\t\t{\n&gt; \t\t\t\t\t\t\tXlsxXf xf = _workbook.Styles.CellXfs[<span style=\"color: blue;\">int</span>.Parse(a_s)];\n&gt; \n&gt; \t\t\t\t\t\t\t<span style=\"color: blue;\">if</span> (xf.ApplyNumberFormat &amp;&amp; IsDateTimeStyle(xf.NumFmtId) &amp;&amp; o != <span style=\"color: blue;\">null</span> &amp;&amp; o.ToString() != <span style=\"color: blue;\">string</span>.Empty)\n&gt; \t\t\t\t\t\t\t{\n&gt; \t\t\t\t\t\t\t\to = DateTime.FromOADate(Convert.ToDouble(o, CultureInfo.InvariantCulture));\n&gt; \t\t\t\t\t\t\t}\n&gt; \t\t\t\t\t\t}\n&gt; \n&gt; \t\t\t\t\t\t<span style=\"color: blue;\">if</span> (col - 1 &lt; _cellsValues.Length)\n&gt; \t\t\t\t\t\t\t_cellsValues[col - 1] = o;\n&gt; \t\t\t\t\t}\n&gt; \t\t\t\t}\n208c202,203\n&lt; \t\t\t\t_depth++;\n---\n&gt; \t\t\t\t<span style=\"color: blue;\">else</span>\n&gt; \t\t\t\t\t_depth++;\n275d269\n&lt; \t\t\t  \n289c283\n&lt;                         table.Columns.Add(<span style=\"color: blue;\">null</span>, <span style=\"color: blue;\">typeof</span>(Object));\n---\n&gt; \t\t\t\t\t\ttable.Columns.Add();\n297c291\n&lt;                             table.Columns.Add(_cellsValues[index].ToString(), <span style=\"color: blue;\">typeof</span>(Object));\n---\n&gt; \t\t\t\t\t\t\ttable.Columns.Add(_cellsValues[index].ToString());\n299c293\n&lt;                             table.Columns.Add(<span style=\"color: blue;\">string</span>.Concat(COLUMN, index), <span style=\"color: blue;\">typeof</span>(Object));\n---\n&gt; \t\t\t\t\t\t\ttable.Columns.Add(<span style=\"color: blue;\">string</span>.Concat(COLUMN, index));\n303,304d296\n&lt;                 \n&lt;                 table.BeginLoadData();\n313d304\n&lt;                 table.EndLoadData();\n315,316c306\n&lt;             dataset.AcceptChanges();\n&lt; \t\t    Helpers.FixDataTypes(dataset);\n---\n&gt; \n\n</pre>\n</div>\n</pre>\n</div>",
    "PostedDate": "2011-03-17T13:40:25.14-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "710649",
    "ThreadId": "249192",
    "Html": "<p>Hi,</p>\r\n<p>My problem is that the currency values are recognized as a DateTime. For example: $43.08 will be \"2/11/1900 1:55:20 AM\". Do you think this patch resolve this issue? If it is, could you please send me your version. My email address is: kardkovacsi@gmail.com</p>\r\n<p>Thx.</p>",
    "PostedDate": "2011-12-11T15:52:55.207-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "718026",
    "ThreadId": "249192",
    "Html": "<p>Attach an example to&nbsp;<a href=\"http://exceldatareader.codeplex.com/workitem/8536\">http://exceldatareader.codeplex.com/workitem/8536</a>&nbsp;and I'll take a look.</p>",
    "PostedDate": "2011-12-28T13:29:00.81-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "854731",
    "ThreadId": "249192",
    "Html": "<p>Hi,</p>\r\n<p>&nbsp;&nbsp;&nbsp; Please say me where to download your code to avoid date-time issue.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-06-27T22:10:41.95-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]