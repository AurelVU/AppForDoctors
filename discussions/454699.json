[
  {
    "Id": "1085559",
    "ThreadId": "454699",
    "Html": "I'm sure this error was discussed earlier but I could not get the solution,so posting it again.\r<br />\n<br />\nI'm trying to read an .xls file using the below code and I get the error:&quot;\r<br />\n<br />\nMemoryStream length must be non-negative and less than 2^31 - 1 - origin.\r<br />\n Parameter name: offset&quot;\r<br />\n<br />\n   at System.IO.MemoryStream.Seek(Int64 offset, SeekOrigin loc)\r<br />\n   at Excel.Core.BinaryFormat.XlsFat..ctor(XlsHeader hdr, List`1 sectors, Int32 sizeOfSector, Boolean isMini, XlsRootDirectory rootDir)\r<br />\n   at Excel.Core.BinaryFormat.XlsHeader.GetMiniFAT(XlsRootDirectory rootDir)\r<br />\n   at Excel.Core.BinaryFormat.XlsStream.CalculateMiniFat(XlsRootDirectory rootDir)\r<br />\n   at Excel.Core.BinaryFormat.XlsStream..ctor(XlsHeader hdr, UInt32 startSector, Boolean isMini, XlsRootDirectory rootDir)\r<br />\n   at Excel.Core.BinaryFormat.XlsRootDirectory..ctor(XlsHeader hdr)\r<br />\n   at Excel.ExcelBinaryReader.readWorkBookGlobals()\r<br />\n   at Excel.ExcelBinaryReader.Initialize(Stream fileStream)\r<br />\n   at Excel.ExcelReaderFactory.CreateBinaryReader(Stream fileStream)\r<br />\n   at LM.GB.CD.CDM.Sharepoint.WebControls.CDMControls.ReadXlsToDS(Byte[] bytes, String fileName, String tableName)\r<br />\n   at LM.GB.CD.CDM.Sharepoint.WebControls.CDMControls.UploadFile(Byte[] bytes, String fileName, String fileType)\r<br />\n   at LM.GB.CD.CDM.Sharepoint.WebControls.HomeDetail.UploadButtonClick(Object sender, EventArgs e)<br />\n<pre><code>public static DataSet ReadXlsToDS(byte[] bytes, string fileName,string tableName)\n        {     \n            MemoryStream memoryStream = new MemoryStream();\n            memoryStream.Write(bytes, 0, bytes.Length);\n            string fileExtension = Path.GetExtension(fileName);\n            IExcelDataReader excelReader = null;\n\n            if (fileExtension == &quot;.xls&quot;)\n            {\n                //Reading from a binary Excel file ('97-2003 format; *.xls)\n                excelReader = ExcelReaderFactory.CreateBinaryReader(memoryStream);\n            }\n            else if (fileExtension == &quot;.xlsx&quot;)\n            {\n                    excelReader = ExcelReaderFactory.CreateOpenXmlReader(memoryStream);               \n            }</code></pre>\n\n",
    "PostedDate": "2013-08-27T14:50:15.823-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1090841",
    "ThreadId": "454699",
    "Html": "I had this same problem. <br />\n<br />\nIt was indeed fix, but the version of Excel Data Reader that is distributed through NuGet ( labeled 2.1.1 ) does not have the fix in it (Although, based on the date it was last updated, it should include the fix ).<br />\n<br />\nI downloaded the source from codeplex, compiled it on VS2012, and double checked that the Unit Test for the MemoryStream source bug CreateBinaryReader did indeed pass. I later copied this version of the DLL to my project, and my existing code that was failing, began to work.<br />\n<br />\nLong story short, there's some versioning inconsitency with some of the Excel Data Reader binaries.<br />\n<br />\nThe test method for this in the Unit Test is &quot;Issue_11553_11570_FATIssue_Offset&quot;, which calls DoTestFATStreamIssue in which a MemoryStream is created from a byte array and passed into the Binary Reader successfully.<br />\n<br />\nEDIT:<br />\nSo, I just went to nuget, and rolled back from 2.1.1, to 2.1, and the MemoryStream issue was fixed.<br />\nSomething is wrong with the NuGet 2.1.1 version. I notified the NuGet owners of the problem.<br />\n<br />\nEDIT 2:<br />\nJust FYI, if you go down from 2.1.1 to 2.1, then excel OLE Automation dates are considered strings. In 2.1.1, the OA dates are considered double's.<br />\n",
    "PostedDate": "2013-09-10T13:12:01.747-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]