[
  {
    "Id": "1253937",
    "ThreadId": "547850",
    "Html": "Dear colleagues,\r<br />\nFirst I'd like to emphasize, that I read any possible topic related with dates and field formats. \r<br />\nBecause I'm trying the possibilities of this library (but also I'm learning programming) I wanted to check whether the imported field from excel sheet is a date, datetime, time or any other stuff I prepared some excel with the dates and other type of fields. \r<br />\nUnfortunately I can't determine correctly what type of field is delivered in the excel sheet. To make my project faster and less time consuming I tried the method which I found on this forum. Instead of:<br />\n<pre><code>DataFromExcel[row, column] = excelReader[column].ToString();</code></pre>\n\nI put:<br />\n<pre><code>DataFromExcel[row, column] = excelReader.GetValue(column).ToString();</code></pre>\n\n&quot;<strong>Value</strong>&quot; should fix the problem with receiving field value with it's format without any changes. So for my test I did an excel sheet saved as XLS and XLSX. This is how I fill the array with data and then I display it with the messageBox:<br />\n<pre><code>DataFromExcel = new object[rows, cols+1];\n            int row=0;\n            while (excelReader.Read())\n            {\n                for (int column = 0; column&lt;cols; column++)\n                {\n                    if (excelReader[column] != null)\n                    {\n                        DataFromExcel[row, column] = excelReader.GetValue(column).ToString(); // read the data from the excel sheet field\n                    }\n                    else\n                    {\n                        DataFromExcel[row, column] = &quot;&quot;;\n                    }\n\n                    if (excelReader[2] != null) // check the type of the field (in my case it's DateTime )\n                    {\n                        DataFromExcel[row, 5] = excelReader.GetValue(2).GetType();\n                    }\n                    \n                }\n                row++;\n            }\n            excelReader.Close();\n\n\n            for (int i = 1; i &lt; rows; i++) // check what's imported.\n            {\n                MessageBox.Show(&quot;ROW &quot; + i + &quot;: &quot; + DataFromExcel[i, 0] + &quot; ^ &quot; + DataFromExcel[i, 1] + &quot; ^ &quot; + DataFromExcel[i, 2] + &quot; ^ &quot; + DataFromExcel[i, 3] + &quot; ^ &quot; + DataFromExcel[i, 4] + &quot; ^ &quot; + DataFromExcel[i, 5]);\n            }</code></pre>\n\nAnd those are the results: For the XLSX file the datetime field is correctly imported (and shown in messageBox) and the provided type is <strong>System.DateTime</strong>. However for the XLS file instead of correct date I get the value e.g. '<strong>40613,3476851852</strong>' and the value type is shown as '<strong>System.Double</strong>'. \r<br />\n<br />\nMy questions are:<br />\n<ol>\n<li>Is it possible to correctly check what is the type of the field in Excel sheet, so I could prepare some formatting for delivered data?</li>\n<li>Is it a bug with this dates format provided by the same method (GetValue) from the XLS file? </li>\n<li>\nIs there any other method to &quot;download&quot; data from Excel file with the values as they are written in the sheet (regardless to their type and format)? <br />\n</li>\n</ol>\nI'd like to say, that I'd like to do something with the values delivered from the Excel sheet but I would like to assume, that the format of the excel sheet may be different every time I'd like to load it.\r<br />\n<br />\nI'd appreciate for the support. \r<br />\n<br />\nBest regards,\r<br />\nMichal<br />\n",
    "PostedDate": "2014-06-06T20:27:01.45-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1255603",
    "ThreadId": "547850",
    "Html": "If there is a discrepancy in the date/time behaviour between XLS files and XLSW files, the first thing you should check is if you created the binary reader using one of the methods that has the convertOADate parameter, and set the value of the parameter to true, i.e.<br />\n<pre><code>IExcelDataReader excelReader = ExcelReaderFactory.CreateBinaryReader(filestream, true);</code></pre>\n\n",
    "PostedDate": "2014-06-12T07:43:42.51-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]